name: Windows Release (Drive + GitHub)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      drive_json_b64:
        description: 'Base64 service account JSON (optional)'
        required: false
      drive_folder_id:
        description: 'Google Drive folder ID (optional)'
        required: false

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Verify version matches tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          python - << 'PY'
          import os, re, sys, pathlib
          ref = os.getenv('REF_NAME', '')
          tag = re.sub(r'^v', '', ref)
          try:
              s = pathlib.Path('app_version.py').read_text(encoding='utf-8')
          except FileNotFoundError:
              print('Error: app_version.py not found', file=sys.stderr)
              sys.exit(1)
          m = re.search(r'APP_VERSION\s*=\s*"([0-9.]+)"', s)
          app = m.group(1) if m else ''
          print(f'Tag={tag} App={app}')
          if not app:
              print('Error: APP_VERSION not found', file=sys.stderr)
              sys.exit(1)
          if tag != app:
              print(f'Version mismatch: tag {tag} != app {app}', file=sys.stderr)
              sys.exit(1)
          PY
      

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r build/requirements-alpha.txt
          pip install google-api-python-client google-auth google-auth-httplib2 pyinstaller

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Build Windows artifacts (onedir, onefile, installer)
        shell: cmd
        run: |
          call build\win_build_release.bat

      - name: Export Drive configuration
        shell: pwsh
        env:
          INPUT_JSON: ${{ inputs.drive_json_b64 }}
          INPUT_FOLDER: ${{ inputs.drive_folder_id }}
          SA_JSON_SECRET: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
          SA_JSON_VAR: ${{ vars.GDRIVE_SERVICE_ACCOUNT_JSON }}
          FOLDER_SECRET: ${{ secrets.GDRIVE_FOLDER_ID }}
          FOLDER_VAR: ${{ vars.GDRIVE_FOLDER_ID }}
          OAUTH_ID_SECRET: ${{ secrets.GDRIVE_CLIENT_ID }}
          OAUTH_ID_VAR: ${{ vars.GDRIVE_CLIENT_ID }}
          OAUTH_SECRET_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          OAUTH_SECRET_VAR: ${{ vars.GDRIVE_CLIENT_SECRET }}
          OAUTH_REFRESH_SECRET: ${{ secrets.GDRIVE_REFRESH_TOKEN }}
          OAUTH_REFRESH_VAR: ${{ vars.GDRIVE_REFRESH_TOKEN }}
        run: |
          $json = $env:INPUT_JSON
          if ([string]::IsNullOrWhiteSpace($json)) { $json = $env:SA_JSON_SECRET }
          if ([string]::IsNullOrWhiteSpace($json)) { $json = $env:SA_JSON_VAR }
          if (-not [string]::IsNullOrWhiteSpace($json)) {
            # Normalize to base64 to avoid multi-line env issues
            if ($json.Trim().StartsWith('{')) {
              $b64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($json))
            } else {
              $b64 = $json
            }
            Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_SERVICE_ACCOUNT_JSON=$b64"
          }
          $fid = $env:INPUT_FOLDER
          if ([string]::IsNullOrWhiteSpace($fid)) { $fid = $env:FOLDER_SECRET }
          if ([string]::IsNullOrWhiteSpace($fid)) { $fid = $env:FOLDER_VAR }
          if (-not [string]::IsNullOrWhiteSpace($fid)) {
            Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_FOLDER_ID=$fid"
          }
          if (-not [string]::IsNullOrWhiteSpace($env:OAUTH_ID_SECRET)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_CLIENT_ID=$($env:OAUTH_ID_SECRET)" }
          elseif (-not [string]::IsNullOrWhiteSpace($env:OAUTH_ID_VAR)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_CLIENT_ID=$($env:OAUTH_ID_VAR)" }
          if (-not [string]::IsNullOrWhiteSpace($env:OAUTH_SECRET_SECRET)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_CLIENT_SECRET=$($env:OAUTH_SECRET_SECRET)" }
          elseif (-not [string]::IsNullOrWhiteSpace($env:OAUTH_SECRET_VAR)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_CLIENT_SECRET=$($env:OAUTH_SECRET_VAR)" }
          if (-not [string]::IsNullOrWhiteSpace($env:OAUTH_REFRESH_SECRET)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_REFRESH_TOKEN=$($env:OAUTH_REFRESH_SECRET)" }
          elseif (-not [string]::IsNullOrWhiteSpace($env:OAUTH_REFRESH_VAR)) { Add-Content -Path $env:GITHUB_ENV -Value "GDRIVE_REFRESH_TOKEN=$($env:OAUTH_REFRESH_VAR)" }

      - name: Find installer
        id: find_installer
        shell: bash
        run: |
          echo "installer=dist/_installer/efdrift-scrutineer-setup.exe" >> $GITHUB_OUTPUT

      - name: Clean Google Drive folder (keep it fresh)
        continue-on-error: true
        shell: pwsh
        run: |
          python build\drive_cleanup.py --folder-id "$env:GDRIVE_FOLDER_ID"

      - name: Upload installer to Google Drive (Service Account)
        id: drive
        continue-on-error: true
        shell: pwsh
        run: |
          if ([string]::IsNullOrWhiteSpace($env:GDRIVE_SERVICE_ACCOUNT_JSON)) {
            Write-Host "GDRIVE_SERVICE_ACCOUNT_JSON not set; skipping Drive upload."; exit 0
          }
          python build\upload_to_drive_sa.py --file "${{ steps.find_installer.outputs.installer }}" --folder-id "$env:GDRIVE_FOLDER_ID"

      - name: Upload installer to Google Drive (OAuth User)
        id: drive_oauth
        continue-on-error: true
        if: ${{ steps.drive.outcome != 'success' || steps.drive.outputs.id == '' }}
        shell: pwsh
        run: |
          if ([string]::IsNullOrWhiteSpace($env:GDRIVE_CLIENT_ID) -or [string]::IsNullOrWhiteSpace($env:GDRIVE_CLIENT_SECRET) -or [string]::IsNullOrWhiteSpace($env:GDRIVE_REFRESH_TOKEN)) {
            Write-Host "OAuth not configured; skipping OAuth Drive upload."; exit 0
          }
          $outfile = 'drive_upload.txt'
          $psi = @(
            'build\gdrive_upload.py', '--file', "${{ steps.find_installer.outputs.installer }}",
            '--name', 'efdrift-scrutineer-setup.exe', '--folder', "$env:GDRIVE_FOLDER_ID",
            '--client-id', "$env:GDRIVE_CLIENT_ID", '--client-secret', "$env:GDRIVE_CLIENT_SECRET",
            '--refresh-token', "$env:GDRIVE_REFRESH_TOKEN"
          )
          $p = Start-Process -FilePath 'python' -ArgumentList $psi -PassThru -NoNewWindow -RedirectStandardOutput $outfile -Wait
          $text = Get-Content $outfile -Raw
          Write-Host $text
          if ($p.ExitCode -ne 0) { exit $p.ExitCode }
          if ($text -match 'FILE_ID=(.+)') { Add-Content -Path $env:GITHUB_OUTPUT -Value ("id=" + $Matches[1].Trim()) }
          if ($text -match 'PUBLIC_URL=(.+)') { Add-Content -Path $env:GITHUB_OUTPUT -Value ("url=" + $Matches[1].Trim()) }

      - name: Build bootstrap EXE (downloads Drive ID)
        if: ${{ (steps.drive.outcome == 'success' && steps.drive.outputs.id != '') || (steps.drive_oauth.outcome == 'success' && steps.drive_oauth.outputs.id != '') }}
        shell: bash
        env:
          EF_SCRUTINEER_DRIVE_ID: ${{ steps.drive.outputs.id || steps.drive_oauth.outputs.id }}
        run: |
          python - << 'PY'
          from pathlib import Path
          p=Path('tools/net_installer_stub.py')
          t=p.read_text(encoding='utf-8')
          import os
          did=os.environ.get('EF_SCRUTINEER_DRIVE_ID','').strip()
          t=t.replace('os.getenv("EF_SCRUTINEER_DRIVE_ID", "1Lwp_TtjGY0tHmF91PfCt8GoyLKGeKi28")', f'os.getenv("EF_SCRUTINEER_DRIVE_ID", "{did}")')
          p.write_text(t,encoding='utf-8')
          PY
          python -m PyInstaller --noconfirm --clean --log-level WARN --onefile --console --name "eF Drift Car Scrutineer" --distpath build --workpath build/bootstrap-build --specpath build tools/net_installer_stub.py

      - name: Create update.json manifest (Drive URL)
        if: ${{ (steps.drive.outcome == 'success' && steps.drive.outputs.url != '') || (steps.drive_oauth.outcome == 'success' && steps.drive_oauth.outputs.url != '') }}
        run: |
          python build\make_manifest.py --file "${{ steps.find_installer.outputs.installer }}" --name "efdrift-scrutineer-setup.exe" --url "${{ steps.drive.outputs.url || steps.drive_oauth.outputs.url }}" --out "dist\update.json"

      - name: Create update.json manifest (GitHub URL fallback)
        if: ${{ steps.drive.outcome != 'success' || steps.drive.outputs.url == '' }}
        run: |
          python build\make_manifest.py --file "${{ steps.find_installer.outputs.installer }}" --name "efdrift-scrutineer-setup.exe" --url "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/efdrift-scrutineer-setup.exe" --out "dist\update.json"

      - name: Upload assets (manifest + installer)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/update.json
            dist/_installer/efdrift-scrutineer-setup.exe
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset (bootstrap EXE)
        if: ${{ steps.drive.outcome == 'success' && steps.drive.outputs.id != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/eF Drift Car Scrutineer.exe
          token: ${{ secrets.GITHUB_TOKEN }}

